@using BornAgainWiki
@using BornAgainWiki.Models.Object
@using Ronin.Model
@using Ronin.Model.Definitions
@using Ronin.Model.Enums
@using Ronin.Model.GameActions
@model ItemViewModel
@{
	ViewData["Title"] = Model.Definition.Name;
	ViewData["AppClass"] = "app-content-full-height";
}

@section Styles {

}

@section Scripts {

}

<!-- BEGIN container -->
<div class="container">
	<!-- BEGIN row -->
	<div class="row justify-content-center">
		<!-- BEGIN col-10 -->
		<div class="col-xl-10">
			<!-- BEGIN row -->
			<div class="row">
				<!-- BEGIN col-9 -->
				<div class="col-xl-9">
					<ul class="breadcrumb">
						<li class="breadcrumb-item"><a href="/@(Model.Definition.SlotType.GetPageName())">@(Model.Definition.SlotType.GetPageName().ToUpper())</a></li>
						<li class="breadcrumb-item active">@Model.Definition.Name.ToUpper()</li>
					</ul>

					<!-- page header -->
					<div class="d-flex mb-3 align-items-center">
						<img class="sprite-md me-2" src="/tex/@(Model.Definition.Textures.FirstOrDefault())" />
						<h1 class="page-header mb-0">
							@Model.Definition.Name <small>@Model.Definition.Rarity</small>
						</h1>
					</div>

					<p>
						@Model.Definition.Description
					</p>

					@if (Model.Definition.HasStatIncreases())
					{
						<div class="d-flex">
							@foreach (var (statType, increase, multiplier) in Model.Definition.GetStatIncreases())
							{
								if (increase != 0)
								{
									<div class="me-4">
										<img class="sprite-sm" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(increase > 0 ? "+" : "")@increase</b>
									</div>
								}

								if (multiplier != 0)
								{
									<div class="me-4">
										<img class="sprite-sm" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(multiplier > 0 ? "+" : "")@multiplier%</b>
									</div>
								}
							}
						</div>
					}

					@if (Model.Definition.BasicCycle.Length > 0)
					{
						<hr class="mb-4">
						<h4>Basic Attack</h4>

						var cycleActions = Model.Definition.BasicCycle.SelectMany(x => x.Actions).Flatten();
						int minDamage = int.MaxValue, maxDamage = int.MinValue;
						var attacks = cycleActions.OfType<AttackGameAction>();
						float maxRange = 0;
						foreach (var attack in attacks)
						{
							var attackDescriptor = Model.Definition.Attacks[attack.Index];
							if (attackDescriptor.MaxDamage == 0) continue;
							minDamage = Math.Min(minDamage, attackDescriptor.MinDamage);
							maxDamage = Math.Max(maxDamage, attackDescriptor.MaxDamage);

							var range = attackDescriptor.Speed * (attackDescriptor.Lifetime / 1000f);
							if (attackDescriptor.Time == TimeType.Boomerang) range *= 0.5f;
							range += attackDescriptor.Radius;
							maxRange = Math.Max(maxRange, range);
						}

						<table class="table table-borderless">
							<tbody>
								<tr>
									<th width="15%">Damage</th>
									<td>@minDamage-@maxDamage</td>
								</tr>
								<tr>
									<th>Range</th>
									<td>@maxRange</td>
								</tr>
							</tbody>
						</table>
					}

					@if (Model.Definition.Ability.Enabled)
					{
						<hr class="mb-4">
						<h4>
							Ability
							@if (Model.Definition.Ability.Style != AbilityStyle.None)
							{
								<small>@Model.Definition.Ability.Style</small>
							}
						</h4>

						RenderGameActions(Model.Definition.Ability.Actions, Model.Definition);
					}
				</div>
				<!-- END col-3 -->
			</div>
			<!-- END row -->
		</div>
		<!-- END col-10 -->
	</div>
	<!-- END row -->
</div>
<!-- END container -->

@{
	void RenderGameActions(IEnumerable<GameAction> gameActions, ObjectDefinition definition)
	{
		foreach (var action in gameActions)
		{
			RenderGameAction(action, definition);
		}
	}

	void RenderGameAction(GameAction gameAction, ObjectDefinition definition)
	{
		switch (gameAction)
		{
			case AttackGameAction attackGameAction:
				var attackDescriptor = definition.GetAttackDescriptor(attackGameAction.Index);

				break;
		}
	}
}