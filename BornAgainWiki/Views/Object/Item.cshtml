@using BornAgainWiki
@using BornAgainWiki.Extensions
@using BornAgainWiki.Models.Object
@using BornAgainWiki.Models.Shared
@using Ronin.Model
@using Ronin.Model.Cache
@using Ronin.Model.Definitions
@using Ronin.Model.Enums
@using Ronin.Model.GameActions
@using Ronin.Model.Modifiers
@model ItemViewModel
@{
	ViewData["Title"] = Model.Definition.Name;
	ViewData["AppClass"] = "app-content-full-height";
	ViewData["MetaDescription"] = Model.Definition.Description;
	ViewData["MetaImage"] = $"/tex/{Model.Definition.Textures.FirstOrDefault()}?s=l";
}

@section Styles {

}

@section Scripts {

}

<!-- BEGIN container -->
<div class="container">
	<!-- BEGIN row -->
	<div class="row justify-content-center">
		<!-- BEGIN col-10 -->
		<div class="col-xl-10">
			<!-- BEGIN row -->
			<div class="row">
				<!-- BEGIN col-9 -->
				<div class="col-xl-9">
					<ul class="breadcrumb">
						@if (Model.Definition.SlotType == SlotType.Ability)
						{
							<li class="breadcrumb-item"><a href="/@Model.Definition.Ability.Style.ToString().ToLower()">@Model.Definition.Ability.Style.ToString().ToUpper()</a></li>
						}
						else if (Model.Definition is HatDefinition)
						{
							<li class="breadcrumb-item"><a href="/hats">HATS</a></li>
						}
						else if (Model.Definition is BlessingDefinition)
						{
							<li class="breadcrumb-item"><a href="/blessings">BLESSINGS</a></li>
						}
						else
						{
							<li class="breadcrumb-item"><a href="/@(Model.Definition.SlotType.GetPageName())">@(Model.Definition.SlotType.GetPageName().ToUpper())</a></li>
						}
						<li class="breadcrumb-item active">@Model.Definition.Name.ToUpper()</li>
					</ul>

					<!-- page header -->
					<div class="d-flex mb-3 align-items-center">
						<img class="sprite me-2" src="/tex/@(Model.Definition.Textures.FirstOrDefault())" />
						<h1 class="page-header mb-0">
							@Model.Definition.Name <small>@Model.Definition.Rarity</small>
						</h1>
					</div>

					<p>
						@Model.Definition.Description
					</p>

					@if (Model.Definition.HasStatIncreases())
					{
						<div class="row justify-content-md-left">
							@foreach (var (statType, increase, multiplier) in Model.Definition.GetStatIncreases())
							{
								if (increase != 0)
								{
									<div class="col-auto mb-2">
										<img class="sprite" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(increase > 0 ? "+" : "")@increase</b>
									</div>
								}

								if (multiplier != 0)
								{
									<div class="col-auto mb-2">
										<img class="sprite" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(multiplier > 0 ? "+" : "")@multiplier%</b>
									</div>
								}
							}
						</div>
					}

					@if (Model.Definition.BasicCycle.Length > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Basic Attack</h4>

						int minDamage = int.MaxValue, maxDamage = int.MinValue;
						float maxRange = 0;
						int minCount = int.MaxValue, maxCount = int.MinValue;
						foreach (var cycle in Model.Definition.BasicCycle)
						{
							int count = 0;
							foreach (var attack in cycle.Actions.Flatten().OfType<AttackGameAction>())
							{
								var attackDescriptor = Model.Definition.Attacks[attack.Index];
								if (attackDescriptor.MaxDamage == 0) continue;
								minDamage = Math.Min(minDamage, attackDescriptor.MinDamage);
								maxDamage = Math.Max(maxDamage, attackDescriptor.MaxDamage);

								count += attackDescriptor.Count;

								var range = attackDescriptor.Speed * (attackDescriptor.Lifetime / 1000f);
								if (attackDescriptor.Time == TimeType.Boomerang) range *= 0.5f;
								range += attackDescriptor.Radius;
								maxRange = Math.Max(maxRange, range);
							}

							minCount = Math.Min(minCount, count);
							maxCount = Math.Max(maxCount, count);
						}

						<dl class="row">
							<dt class="col-sm-2 pt-1">Damage</dt>
							<dd class="col-sm-10"><h4 class="mb-0">@minDamage-@maxDamage</h4></dd>
							<dt class="col-sm-2">Range</dt>
							<dd class="col-sm-10">@maxRange</dd>
							@if (maxCount != minCount)
							{
								<dt class="col-sm-2">Count</dt>
								<dd class="col-sm-10">@minCount-@maxCount</dd>
							}
							else if (minCount > 1)
							{
								<dt class="col-sm-2">Count</dt>
								<dd class="col-sm-10">@minCount</dd>
							}
							@if (Model.Definition.RateOfFire != 1)
							{
								<dt class="col-sm-2">Rate of Fire</dt>
								<dd class="col-sm-10">@((int)(Model.Definition.RateOfFire * 100))%</dd>
							}
						</dl>
					}

					@if (Model.Definition.Ability.Enabled)
					{
						<hr class="mb-4">
						<div class="float-end d-flex align-items-end pt-1">
							<span>Cooldown:</span>
							<h4 class="pb-0 mb-0 ms-1">@((Model.Definition.Ability.Cooldown / 1000f).ToString("0.#"))s</h4>
						</div>
						<h4 class="page-header">@Model.Definition.Ability.Name@if (Model.Definition.Ability.Style != AbilityStyle.None)
							{
								<small>@Model.Definition.Ability.Style</small>
							} </h4>

						@if (Model.Definition.Ability?.Charges > 1)
						{
							<div class="d-flex align-items-center">@((Model.Definition.Ability.Charges)) charges</div>
						}

						@await Html.GameActionsAsync(Model.Definition.Ability?.Actions, Model.Definition);
					}

					@if (Model.Definition.Consumable.Enabled)
					{
						<hr class="mb-4">
						<h4 class="page-header">Consumable</h4>
						@await Html.GameActionsAsync(Model.Definition.Consumable?.Actions, Model.Definition);
					}

					@if (Model.Definition.Modifiers.Length > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Modifiers</h4>
						@await Html.ModifiersAsync(Model.Definition.Modifiers, Model.Definition)
					}

					@if (Model.Definition is BlessingDefinition blessingDefinition &&
						blessingDefinition.BlessingStyle == BlessingStyle.Standard)
					{
						<h4 class="page-header">Max Modifiers</h4>
						@await Html.ModifiersAsync(Model.Definition.Modifiers, Model.Definition, 1)
					}

					@if (Model.Definition.Cost?.Honor > 0 || Model.Definition.Cost?.Medallions > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Price</h4>
						@if (Model.Definition.Cost.Honor > 0)
						{
							<img class="sprite me-1" src="/img/misc/deadhonor.png" />
							@Model.Definition.Cost.Honor.ToString("n0")
						}
						@if (Model.Definition.Cost.Medallions > 0)
						{
							<img class="sprite me-1" src="/img/misc/medallions.png" />
							@Model.Definition.Cost.Medallions.ToString("n0")
						}
					}

					@if (Model.Definition is HatDefinition hat)
					{
						<hr class="mb-4">
						<h4 class="page-header">Wardrobe</h4>

						if (hat.Template &&
							hat.SaveCost > 0)
						{
							<img class="sprite me-1" src="/img/misc/medallions.png" />
							@hat.SaveCost.ToString("n0")
						}
						else
						{
							@:Cannot be saved in wardrobe
						}
					}
				</div>
				<!-- END col-3 -->
			</div>
			<!-- END row -->
		</div>
		<!-- END col-10 -->
	</div>
	<!-- END row -->
</div>
<!-- END container -->
