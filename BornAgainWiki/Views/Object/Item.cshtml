@using BornAgainWiki
@using BornAgainWiki.Models.Object
@using Ronin.Model
@using Ronin.Model.Cache
@using Ronin.Model.Definitions
@using Ronin.Model.Enums
@using Ronin.Model.GameActions
@using Ronin.Model.Modifiers
@model ItemViewModel
@{
	ViewData["Title"] = Model.Definition.Name;
	ViewData["AppClass"] = "app-content-full-height";
}

@section Styles {

}

@section Scripts {

}

<!-- BEGIN container -->
<div class="container">
	<!-- BEGIN row -->
	<div class="row justify-content-center">
		<!-- BEGIN col-10 -->
		<div class="col-xl-10">
			<!-- BEGIN row -->
			<div class="row">
				<!-- BEGIN col-9 -->
				<div class="col-xl-9">
					<ul class="breadcrumb">
						@if (Model.Definition.SlotType == SlotType.Ability)
						{
							<li class="breadcrumb-item"><a href="/@Model.Definition.Ability.Style.ToString().ToLower()">@Model.Definition.Ability.Style.ToString().ToUpper()</a></li>
						}
						else
						{
							<li class="breadcrumb-item"><a href="/@(Model.Definition.SlotType.GetPageName())">@(Model.Definition.SlotType.GetPageName().ToUpper())</a></li>
						}
						<li class="breadcrumb-item active">@Model.Definition.Name.ToUpper()</li>
					</ul>

					<!-- page header -->
					<div class="d-flex mb-3 align-items-center">
						<img class="sprite-md me-2" src="/tex/@(Model.Definition.Textures.FirstOrDefault())" />
						<h1 class="page-header mb-0">
							@Model.Definition.Name <small>@Model.Definition.Rarity</small>
						</h1>
					</div>

					<p>
						@Model.Definition.Description
					</p>

					@if (Model.Definition.HasStatIncreases())
					{
						<div class="d-flex">
							@foreach (var (statType, increase, multiplier) in Model.Definition.GetStatIncreases())
							{
								if (increase != 0)
								{
									<div class="me-4">
										<img class="sprite-sm" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(increase > 0 ? "+" : "")@increase</b>
									</div>
								}

								if (multiplier != 0)
								{
									<div class="me-4">
										<img class="sprite-sm" src="/img/stat/@(statType.ToString().ToLower()).png" />
										<b class="align-middle">@(multiplier > 0 ? "+" : "")@multiplier%</b>
									</div>
								}
							}
						</div>
					}

					@if (Model.Definition.BasicCycle.Length > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Basic Attack</h4>

						int minDamage = int.MaxValue, maxDamage = int.MinValue;
						float maxRange = 0;
						int minCount = int.MaxValue, maxCount = int.MinValue;
						foreach (var cycle in Model.Definition.BasicCycle)
						{
							int count = 0;
							foreach (var attack in cycle.Actions.Flatten().OfType<AttackGameAction>())
							{
								var attackDescriptor = Model.Definition.Attacks[attack.Index];
								if (attackDescriptor.MaxDamage == 0) continue;
								minDamage = Math.Min(minDamage, attackDescriptor.MinDamage);
								maxDamage = Math.Max(maxDamage, attackDescriptor.MaxDamage);

								count += attackDescriptor.Count;

								var range = attackDescriptor.Speed * (attackDescriptor.Lifetime / 1000f);
								if (attackDescriptor.Time == TimeType.Boomerang) range *= 0.5f;
								range += attackDescriptor.Radius;
								maxRange = Math.Max(maxRange, range);
							}

							minCount = Math.Min(minCount, count);
							maxCount = Math.Max(maxCount, count);
						}

						<dl class="row">
							<dt class="col-sm-2 pt-1">Damage</dt>
							<dd class="col-sm-10"><h4 class="mb-0">@minDamage-@maxDamage</h4></dd>
							<dt class="col-sm-2">Range</dt>
							<dd class="col-sm-10">@maxRange</dd>
							@if (maxCount != minCount)
							{
								<dt class="col-sm-2">Count</dt>
								<dd class="col-sm-10">@minCount-@maxCount</dd>
							}
							else if (minCount > 1)
							{
								<dt class="col-sm-2">Count</dt>
								<dd class="col-sm-10">@minCount</dd>
							}
							@if (Model.Definition.RateOfFire != 1)
							{
								<dt class="col-sm-2">Rate of Fire</dt>
								<dd class="col-sm-10">@((int)(Model.Definition.RateOfFire * 100))%</dd>
							}
						</dl>
					}

					@if (Model.Definition.Ability.Enabled)
					{
						<hr class="mb-4">
						<div class="float-end d-flex align-items-end pt-1">
							<span>Cooldown:</span>
							<h4 class="pb-0 mb-0 ms-1">@((Model.Definition.Ability.Cooldown / 1000f).ToString("0.#"))s</h4>
						</div>
						<h4 class="page-header">@Model.Definition.Ability.Name@if (Model.Definition.Ability.Style != AbilityStyle.None)
							{
								<small>@Model.Definition.Ability.Style</small>
							} </h4>
						RenderGameActions(Model.Definition.Ability.Actions, Model.Definition, true);
					}

					@if (Model.Definition.Consumable.Enabled)
					{
						<hr class="mb-4">
						<h4 class="page-header">Consumable</h4>
						RenderGameActions(Model.Definition.Consumable.Actions, Model.Definition, true);
					}

					@if (Model.Definition.Modifiers.Length > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Modifiers</h4>
						RenderModifiers(Model.Definition.Modifiers, Model.Definition, true);
					}

					@if (Model.Definition is BlessingDefinition blessingDefinition &&
										blessingDefinition.BlessingStyle == BlessingStyle.Standard)
					{
						<h4 class="page-header">Max Modifiers</h4>
						RenderModifiers(Model.Definition.Modifiers, Model.Definition, true, 1);
					}

					@if (Model.Definition.Cost?.Honor > 0 || Model.Definition.Cost?.Medallions > 0)
					{
						<hr class="mb-4">
						<h4 class="page-header">Price</h4>
						@if (Model.Definition.Cost.Honor > 0)
						{
							<img class="sprite-md me-1" src="/img/misc/honor.png" />
							<small class="me-3">@(Model.Definition.Cost.Honor) Honor</small>
						}
						@if (Model.Definition.Cost.Medallions > 0)
						{
							<img class="sprite-md me-1" src="/img/misc/medallions.png" />
							<small class="me-3">@(Model.Definition.Cost.Medallions) Medallions</small>
						}
					}

				</div>
				<!-- END col-3 -->
			</div>
			<!-- END row -->
		</div>
		<!-- END col-10 -->
	</div>
	<!-- END row -->
</div>
<!-- END container -->
@{
	void RenderGameActions(IEnumerable<GameAction> gameActions, ObjectDefinition definition, bool unstyled = false, bool onHit = false, bool constant = false, float scalar = 1)
	{
		<ul @if (unstyled)
		{
			@:class="list-unstyled"
		}>
			@foreach (var action in gameActions)
			{
				if (!action.Tooltip || action is BlockAttackGameAction) continue;
				RenderGameAction(action, definition, onHit, constant, scalar);
			}
		</ul>
	}

	void RenderGameAction(GameAction gameAction, ObjectDefinition definition, bool onHit, bool constant, float scalar)
	{
		<li>
			@switch (gameAction)
			{
				case AttackGameAction attackGameAction:
					var attackDescriptor = definition.GetAttackDescriptor(attackGameAction.Index);
					var count = attackDescriptor.TooltipCount ?? attackDescriptor.Count;
					<div class="d-flex align-items-center">
						@if (attackDescriptor.Type == AttackType.Slash)
						{
							<img class="sprite-md me-1" src="/img/game/slash.png" />
							<small class="me-3">@(attackDescriptor.Spread)°</small>
						}
						else if (attackDescriptor.Type == AttackType.Aoe ||
						(attackDescriptor.Type == AttackType.Bomb && attackDescriptor.Textures.Length == 0))
						{
							<img class="sprite-md me-3" src="/img/game/aoe.png" />
						}
						else if (attackDescriptor.Textures.Length > 0)
						{
							<img class="sprite-md me-3" src="@attackDescriptor.GetImageSource()" />
						}

						@if (attackDescriptor.MaxDamage != attackDescriptor.MinDamage)
						{
							<span class="me-1">Damage:</span>
							<h4 class="me-3">@attackDescriptor.MinDamage-@attackDescriptor.MaxDamage @(count > 1 ? $"x{count}" : "")</h4>
						}
						else if (attackDescriptor.MaxDamage > 0)
						{
							<span class="me-1">Damage:</span>
							<h4 class="me-3">@attackDescriptor.MaxDamage @(count > 1 ? $"x{count}" : "")</h4>
						}

						@if (attackDescriptor.Type == AttackType.Projectile)
						{
							var projectileRange = attackDescriptor.Speed * (attackDescriptor.Lifetime / 1000f);
							if (attackDescriptor.Time == TimeType.Boomerang) projectileRange *= 0.5f;
							<span class="me-1">Range:</span>
							<b>@projectileRange</b>
						}
						else
						{
							<span class="me-1">Radius:</span>
							<b>@attackDescriptor.Radius</b>
						}
					</div>

					@if (attackDescriptor.OnHit.Length > 0)
					{
						RenderGameActions(attackDescriptor.OnHit, definition, onHit: true);
					}
					break;
				case DamageOverTimeGameAction damageOverTimeGameAction:
					var tickDamage = damageOverTimeGameAction.Damage;
					var totalDamage = tickDamage * damageOverTimeGameAction.Ticks;

					<div class="d-flex align-items-center">
						@if (damageOverTimeGameAction.StatusEffect != StatusEffects.None)
						{
							<img class="sprite-sm me-1" src="/img/status/@(damageOverTimeGameAction.StatusEffect.ToString().ToLower()).png" />
						}
						<b class="me-1">@totalDamage</b> over @((damageOverTimeGameAction.Duration / 1000f).ToString("0.0"))s
					</div>
					break;
				case DelayedGameAction delayedGameAction:
					<p>After @((delayedGameAction.Duration / 1000f).ToString("0.0"))s</p>
					RenderGameActions(delayedGameAction.Actions, definition);
					break;
				case ForceGameAction forceGameAction:
					if (onHit)
					{
						@:Knockup @((forceGameAction.Magnitude / 10f).ToString("0.0")) units
					}
					else
					{
						@:Jump @((forceGameAction.Magnitude / 10f).ToString("0.0")) units
					}
					break;
				case KnockbackGameAction knockbackGameAction:
					var range = Math.Abs(knockbackGameAction.Magnitude);
					if (knockbackGameAction.Magnitude >= 0 && !knockbackGameAction.Normalized)
					{
						@:Knockback enemies
					}
					else if (knockbackGameAction.Magnitude < 0 && !knockbackGameAction.Normalized)
					{
						@:Pull enemies
					}
					else if (knockbackGameAction.Magnitude >= 0 && knockbackGameAction.Normalized)
					{
						@:Knockback enemies @range units
					}
					else if (knockbackGameAction.Magnitude < 0 && knockbackGameAction.Normalized)
					{
						@:Pull enemies @range units
					}
					break;
				case MoveGameAction moveGameAction:
					if (moveGameAction.MinRange != moveGameAction.MaxRange)
					{
						@:Move between @moveGameAction.MinRange-@moveGameAction.MaxRange units in @((moveGameAction.Duration / 1000f).ToString("0.0"))s
					}
					else if (moveGameAction.MaxRange == 0)
					{
						@:Stationary for @((moveGameAction.Duration / 1000f).ToString("0.0"))s
					}
					else
					{
						@:Move @moveGameAction.MinRange units in @((moveGameAction.Duration / 1000f).ToString("0.0"))s
					}
					break;
				case StatusEffectGameAction statusEffectGameAction:
					<div class="d-flex align-items-center">
						<img class="sprite-sm me-1" src="/img/status/@(statusEffectGameAction.Type.ToString().ToLower()).png" />
						@if (constant)
						{
							<div><b class="me-1">@statusEffectGameAction.Type.GetLanguage()</b></div>
						}
						else
						{
							<div><b class="me-1">@statusEffectGameAction.Type.GetLanguage()</b> for @((statusEffectGameAction.Duration * scalar / 1000f).ToString("0.0"))s</div>
						}
					</div>
					break;
				case HealGameAction healGameAction:
					<div class="d-flex align-items-center">
						<img class="sprite-sm me-1" src="/img/stat/maxhealth.png" /> Heal @(healGameAction.Amount * scalar)
					</div>
					break;
			}
		</li>
	}

	void RenderModifiers(IEnumerable<Modifier> modifiers, ObjectDefinition definition, bool unstyled = false, float charge = 0)
	{
		<ul @if (unstyled)
		{
			@:class="list-unstyled"
		}>
			@foreach (var modifier in modifiers)
			{
				RenderModifier(modifier, definition, charge);
			}
		</ul>
	}

	void RenderModifier(Modifier modifier, ObjectDefinition definition, float charge)
	{
		var scalar = modifier.BaseCount + (modifier.MaxCount - modifier.BaseCount) * charge;
		<li>
			@switch (modifier)
			{
				case CriticalStrikeModifier criticalStrikeModifier:
					<div class="d-flex align-items-center"> @($"+{(int)Math.Round(criticalStrikeModifier.Chance * scalar) / 10f:0.#}% crictical strike chance")</div>
					break;
				case CooldownModifier cooldownModifier:
					if (cooldownModifier.Archetype == SlotArchetype.Boot)
					{
						<div class="d-flex align-items-center">@((int)Math.Round(cooldownModifier.Percent * scalar))% Boot cooldowns</div>
					}
					else if (cooldownModifier.Archetype == SlotArchetype.Ability)
					{
						<div class="d-flex align-items-center">@((int)Math.Round(cooldownModifier.Percent * scalar))% Ability cooldowns</div>
					}
					else if (cooldownModifier.Archetype == SlotArchetype.Weapon)
					{
						<div class="d-flex align-items-center">@((int)Math.Round(cooldownModifier.Percent * scalar))% Weapon cooldowns</div>
					}
					break;
				case ImmunityModifier immunityModifier:
					<div class="d-flex align-items-center"><img class="sprite-sm me-1" src="/img/status/@(immunityModifier.Type.ToString().ToLower()).png" /> -@((int)Math.Round(immunityModifier.Immunity * scalar))% @(immunityModifier.Type)</div>
					break;
				case BlockChanceModifier blockChanceModifier:
					<div class="d-flex align-items-center">@($"+{(int)Math.Round(blockChanceModifier.Chance * scalar) / 10f:0.#}% block chance")</div>
					break;
				case TrueDamageModifier trueDamageModifier:
					<div class="d-flex align-items-center">@($"+{(int)Math.Round(trueDamageModifier.Chance * scalar) / 10f:0.#}% true damage chance")</div>
					break;

				case IncreaseBuffsModifier increaseBuffsModifier:
					<div class="d-flex align-items-center">@($"Beneficial status effects +{(int)Math.Round(increaseBuffsModifier.Duration * scalar) / 1000f:0.#}s")</div>
					break;
				case GroundForceImmunityModifier groundForceImmunityModifier:
					<div class="d-flex align-items-center">@($"{(int)Math.Round(groundForceImmunityModifier.Immunity * scalar)}% ground force immunity")</div>
					break;
				case TriggerModifier triggerModifier:
					<div class="d-flex align-items-center"><h4>@(GetTriggerTitle(triggerModifier.Events))</h4></div>
					RenderGameActions(triggerModifier.Actions, definition, scalar: scalar);
					break;
				case AvoidDamageModifier avoidDamageModifier:
					<div class="d-flex align-items-center"><h4>@($"Avoid damage for {(int)Math.Round(avoidDamageModifier.Duration * scalar) / 1000f:0.#}s")</h4></div>
					RenderGameActions(avoidDamageModifier.Actions, definition, constant: true);
					break;
				case LowHealthModifier lowHealthModifier:
					<div class="d-flex align-items-center">
						<h4>@($"Below {(int)Math.Round(lowHealthModifier.Percentage * scalar)}% health")</h4>
					</div>
					RenderGameActions(lowHealthModifier.Actions, definition, constant: true);
					break;
				case AttackReflectModifier attackReflectModifier:
					<div class="d-flex align-items-center"><img class="sprite-sm me-1" src="/img/status/attackreflect.png" />@($"+{(int)Math.Round(attackReflectModifier.Percent * scalar) / 10f:0.#}% damage reflection")</div>
					break;
			}
		</li>
	}

	static string GetTriggerTitle(IEnumerable<TriggerEvent> events)
	{
		var stringBuilder = StringBuilderCache.Get();
		var first = true;
		foreach (var @event in events)
		{
			var trigger = @event.GetLanguage();
			if (first) stringBuilder.Append("On ");
			else stringBuilder.Append(" or ");
			stringBuilder.Append(trigger);
			first = false;
		}
		return StringBuilderCache.Complete(stringBuilder);
	}
}
